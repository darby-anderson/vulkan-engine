#version 460

// size of a workgroup for compute
layout(local_size_x = 16, local_size_y = 16) in;

// descriptor bindings for the pipeline
// image contains linear representation of color
layout(rgba16f, set = 0, binding = 0) uniform image2D image;

layout( push_constant ) uniform constants
{
    float exposure;
    uint tone_mapping_strategy; // 0 - None, 1 - Simple RGB Reinhard, 2 - Hable-Filmic,
} PushConstants;

// converts our rgb values to a brightness value
float luminance(vec3 v) {
    return dot(v, vec3(0.2126, 0.7152, 0.0722));
}

vec3 uncharted2_tonemap_partial(vec3 hdr_color) {
    float A = 0.15;
    float B = 0.50;
    float C = 0.10;
    float D = 0.20;
    float E = 0.02;
    float F = 0.30;

    vec3 num = hdr_color * (A*hdr_color + C*B) + D*E;
    vec3 denom = hdr_color * (A*hdr_color + B) + D*F;

    return  num/denom - E/F;
}

vec3 uncharted2_filmic(vec3 hdr_color, float exposure_bias) {
    // float exposure_bias = 2.0;
    vec3 curr = uncharted2_tonemap_partial(hdr_color * exposure_bias);

    vec3 W =  vec3(11.2);
    vec3 white_scale = vec3(1.0) / uncharted2_tonemap_partial(W);
    return curr * white_scale;
}

void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(image);

    if(texelCoord.x >= size.x && texelCoord.y >= size.y) {
        return;
    }

    vec3 mapped_color;
    float gamma = 2.2;
    vec3 hdr_color = imageLoad(image, texelCoord).xyz;

    // Great resource - (https://64.github.io/tonemapping/)
    if(PushConstants.tone_mapping_strategy == 1) { // Simple Reinhard
        // Reinhard tone mapping only has a 'shoulder', giving a soft transition towards over-exposed highlights

        mapped_color = hdr_color / (hdr_color + vec3(1.0f));

    } else if (PushConstants.tone_mapping_strategy == 2) { // Hable-Filmic/Uncharted 2. Here is a more customizable version: (http://filmicworlds.com/blog/filmic-tonemapping-with-piecewise-power-curves/)
        // Filmic tone-mapping allows for stronger black, as well as having the benefits of softer transitions towards highlights

        mapped_color = uncharted2_filmic(hdr_color, PushConstants.exposure);
    } else {
        mapped_color = hdr_color;
    }

    mapped_color = pow(mapped_color, vec3(1.0 / gamma));
    imageStore(image, texelCoord, vec4(mapped_color, 1.0f));

}

